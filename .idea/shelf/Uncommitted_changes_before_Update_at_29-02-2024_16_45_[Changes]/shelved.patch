Index: app/src/main/res/layout/search_card.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!-- Your item layout for RecyclerView -->\r\n<androidx.cardview.widget.CardView\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"75dp\"\r\n    android:layout_margin=\"8dp\"\r\n    app:cardCornerRadius=\"16dp\"\r\n    app:cardBackgroundColor=\"@color/black\">\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"horizontal\"\r\n        android:padding=\"8dp\">\r\n\r\n        <de.hdodenhof.circleimageview.CircleImageView\r\n            android:id=\"@+id/photo\"\r\n            android:layout_width=\"64dp\"\r\n            android:layout_height=\"50dp\"\r\n            android:contentDescription=\"User Photo\"\r\n            android:scaleType=\"centerCrop\"\r\n            android:src=\"@drawable/microsoft\" />\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:orientation=\"vertical\"\r\n            android:layout_marginStart=\"8dp\">\r\n\r\n            <TextView\r\n                android:id=\"@+id/title_text_view\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_gravity=\"center\"\r\n                android:layout_marginStart=\"-40dp\"\r\n                android:layout_marginTop=\"10dp\"\r\n                android:text=\"Title\"\r\n                android:textStyle=\"bold\"\r\n                android:textSize=\"18sp\"\r\n                android:textColor=\"@color/white\"/>\r\n        </LinearLayout>\r\n    </LinearLayout>\r\n    <com.google.android.material.divider.MaterialDivider\r\n        android:id=\"@+id/divider\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_gravity=\"bottom\" />\r\n</androidx.cardview.widget.CardView>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/search_card.xml b/app/src/main/res/layout/search_card.xml
--- a/app/src/main/res/layout/search_card.xml	(revision 36fe2522262a8f365fad1c49702e40c0890afe04)
+++ b/app/src/main/res/layout/search_card.xml	(date 1709201253073)
@@ -32,13 +32,18 @@
                 android:id="@+id/title_text_view"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
-                android:layout_gravity="center"
-                android:layout_marginStart="-40dp"
-                android:layout_marginTop="10dp"
                 android:text="Title"
                 android:textStyle="bold"
                 android:textSize="18sp"
                 android:textColor="@color/white"/>
+
+            <TextView
+                android:id="@+id/description_text_view"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="Description"
+                android:textSize="14sp"
+                android:textColor="@color/white" />
         </LinearLayout>
     </LinearLayout>
     <com.google.android.material.divider.MaterialDivider
Index: app/src/main/java/com/example/jobhunt/TempActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.jobhunt;\r\n\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.firestore.CollectionReference;\r\nimport com.google.firebase.firestore.DocumentReference;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\r\n\r\nimport java.util.HashMap;\r\n\r\npublic class TempActivity extends AppCompatActivity {\r\n\r\n    private TextView textView,description,txtworkplace,txttime,txtsalary,txtlocation,txtexpr,txteligibility;\r\n    ImageView imgphoto,imageView;\r\n    Button btnapply;\r\n\r\n    private FirebaseFirestore db;\r\n    private FirebaseAuth auth;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_temp);\r\n\r\n        textView = findViewById(R.id.temp);\r\n        description = findViewById(R.id.description);\r\n        txtworkplace = findViewById(R.id.workplace);\r\n        txttime = findViewById(R.id.time);\r\n        txtsalary = findViewById(R.id.salary);\r\n        txteligibility = findViewById(R.id.eligibility);\r\n        imgphoto = findViewById(R.id.photo);\r\n        txtlocation = findViewById(R.id.location);\r\n        txtexpr = findViewById(R.id.expr);\r\n        btnapply = findViewById(R.id.apply);\r\n        imageView = findViewById(R.id.imageView);\r\n\r\n        String title = getIntent().getStringExtra(\"title\");\r\n\r\n        String des = getIntent().getStringExtra(\"description\");\r\n        String photo = getIntent().getStringExtra(\"img\");\r\n\r\n\r\n        textView.setText(title != null ? title : \"No Title\");\r\n        description.setText(des != null ? des : \"No description\");\r\n\r\n            Glide.with(this)\r\n                    .load(photo)\r\n                    .placeholder(R.drawable.new1removebg)\r\n                    .error(R.drawable.baseline_warning_24)\r\n                    .into(imgphoto);\r\n\r\n        String documentId = getIntent().getStringExtra(\"cid\");\r\n        String id = getIntent().getStringExtra(\"id\");\r\n\r\n        db = FirebaseFirestore.getInstance();\r\n        auth = FirebaseAuth.getInstance();\r\n\r\n        String userId = auth.getCurrentUser().getUid();\r\n\r\n        resumename(userId);\r\n\r\n\r\n        FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n\r\n//        db.collection(\"jobs\").document(documentId).get()\r\n//                .addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\r\n//                    @Override\r\n//                    public void onComplete(@NonNull Task<DocumentSnapshot> task) {\r\n//                        if (task.isSuccessful()) {\r\n//                            DocumentSnapshot document = task.getResult();\r\n//                            if (document.exists()) {\r\n//                                // Document exists, extract data and display\r\n//                                String workplace = document.getString(\"workplace\");\r\n//                                String time = document.getString(\"time\");\r\n//                                String salary = document.getString(\"salary\");\r\n//                                String location = document.getString(\"location\");\r\n//                                String expr = document.getString(\"expr\");\r\n//\r\n//                                txtworkplace.setText(workplace != null ? workplace : \"No workplace\");\r\n//                                txttime.setText(time != null ? time : \"No time\");\r\n//                                txtsalary.setText(salary != null ? salary : \"No salary\");\r\n//                                txtlocation.setText(location != null ? location : \"No location\");\r\n//                                txtexpr.setText(expr != null ? expr : \"No expr\");\r\n//\r\n//                            } else {\r\n//                                // Document does not exist, display default message\r\n//                                txtworkplace.setText(\"txtworkplace not found\");\r\n//                                txttime.setText(\"No description txttime\");\r\n//                                txtsalary.setText(\"No description txtsalary\");\r\n//                            }\r\n//                        } else {\r\n//                            // Handle errors while fetching document\r\n//                            txtworkplace.setText(\"Error fetching txtworkplace\");\r\n//                            txttime.setText(\"Error fetching txttime\");\r\n//                            txtsalary.setText(\"No txtsalary available\");\r\n//                        }\r\n//                    }\r\n//                });\r\n\r\n        db.collection(\"jobs\").document(documentId).get()\r\n                .addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<DocumentSnapshot> task) {\r\n                        if (task.isSuccessful()) {\r\n                            DocumentSnapshot document = task.getResult();\r\n                            CollectionReference jobCollectionRef = db.collection(\"jobs\").document(documentId).collection(\"job\").document(id).getParent();\r\n                            if (document.exists()) {\r\n                                // Document exists, extract data and display\r\n                                jobCollectionRef.get().addOnCompleteListener(jobTask -> {\r\n                                    if (jobTask.isSuccessful()) {\r\n                                        for (QueryDocumentSnapshot jobDocument : jobTask.getResult()) {\r\n                                            // Extract designation, description, etc. from each job document\r\n\r\n                                            String location = jobDocument.getString(\"location\");\r\n                                            String experience = jobDocument.getString(\"experience\");\r\n                                            String salary = jobDocument.getString(\"salary\");\r\n                                            String time = jobDocument.getString(\"time\");\r\n                                            String workplace = jobDocument.getString(\"workplace\");\r\n                                            String eligibility = jobDocument.getString(\"eligibility\");\r\n\r\n                                            txtlocation.setText(location != null ? location : \"No location\");\r\n                                            txtsalary.setText(salary != null ? salary : \"No salary\");\r\n                                            txtexpr.setText(experience != null ? experience : \"No experience\");\r\n                                            txtworkplace.setText(workplace != null ? workplace : \"No expr\");\r\n                                            txttime.setText(time != null ? time : \"No time\");\r\n                                            txteligibility.setText(eligibility != null ? eligibility : \"No eligibility\");\r\n\r\n                                        }\r\n                                        // Notify adapter after loading all data outside the loop\r\n\r\n                                    } else {\r\n                                        // Handle error\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                // Document does not exist, display default message\r\n                                txtworkplace.setText(\"txtworkplace not found\");\r\n                                txttime.setText(\"No description txttime\");\r\n                                txtsalary.setText(\"No description txtsalary\");\r\n                            }\r\n                        } else {\r\n                            // Handle errors while fetching document\r\n                            txtworkplace.setText(\"Error fetching txtworkplace\");\r\n                            txttime.setText(\"Error fetching txttime\");\r\n                            txtsalary.setText(\"No txtsalary available\");\r\n                        }\r\n                    }\r\n                });\r\n\r\n\r\n        //image view chang\r\n        AlreadyApplied(documentId);\r\n        btnapply.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                checkIfAlreadyApplied(documentId);\r\n            }\r\n        });\r\n\r\n    }\r\n    private void AlreadyApplied(String jobId) {\r\n        FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n        FirebaseUser currentUser = FirebaseAuth.getInstance().getCurrentUser();\r\n        if (currentUser != null) {\r\n            String userId = currentUser.getUid();\r\n            DocumentReference userRef = db.collection(\"users\").document(userId)\r\n                    .collection(\"jobApply\").document(jobId);\r\n            userRef.get().addOnSuccessListener(documentSnapshot -> {\r\n                if (documentSnapshot.exists()) {\r\n                    // User has already applied for this job\r\n                    imageView.setImageResource(R.drawable.baseline_bookmark);\r\n                } else {\r\n                    // User has not applied for this job yet\r\n//                    applyForJob(jobId);\r\n                }\r\n            }).addOnFailureListener(e -> {\r\n                // Handle failure\r\n                imageView.setImageResource(R.drawable.baseline_bookmark_border_24);\r\n//                Toast.makeText(this, \"Failed to check if already applied\", Toast.LENGTH_SHORT).show();\r\n            });\r\n        }\r\n    }\r\n    private void checkIfAlreadyApplied(String jobId) {\r\n        FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n        FirebaseUser currentUser = FirebaseAuth.getInstance().getCurrentUser();\r\n        if (currentUser != null) {\r\n            String userId = currentUser.getUid();\r\n            DocumentReference userRef = db.collection(\"users\").document(userId)\r\n                    .collection(\"jobApply\").document(jobId);\r\n            userRef.get().addOnSuccessListener(documentSnapshot -> {\r\n                if (documentSnapshot.exists()) {\r\n                    // User has already applied for this job\r\n                    Toast.makeText(this, \"You have already applied for this job\", Toast.LENGTH_SHORT).show();\r\n                } else {\r\n                    // User has not applied for this job yet\r\n//                    applyForJob(jobId);\r\n                    bottomsheet bottomSheet = bottomsheet.newInstance(jobId);\r\n                    bottomSheet.show(getSupportFragmentManager(),null);\r\n                }\r\n            }).addOnFailureListener(e -> {\r\n                // Handle failure\r\n                Toast.makeText(this, \"Failed to check if already applied\", Toast.LENGTH_SHORT).show();\r\n            });\r\n        }\r\n    }\r\n\r\n    private void resumename(String userId) {\r\n        // Get the reference to the document containing the user data\r\n        DocumentReference userRef = db.collection(\"users\").document(userId);\r\n        // Fetch the document containing the user data\r\n        userRef.get().addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onSuccess(DocumentSnapshot documentSnapshot) {\r\n                if (documentSnapshot.exists()) {\r\n                    // Get the image URL from the \"profileImageUrl\" field in the document\r\n                    String resume = documentSnapshot.getString(\"resumeFileName\");\r\n\r\n\r\n                } else {\r\n                    // Document does not exist\r\n                    // You can handle this case accordingly\r\n                }\r\n            }\r\n        }).addOnFailureListener(new OnFailureListener() {\r\n            @Override\r\n            public void onFailure(@NonNull Exception e) {\r\n                // Handle failure to fetch user data\r\n                Log.e(\"EditProfile\", \"Error fetching user data\", e);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    private void applyForJob(String jobId) {\r\n        FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n        FirebaseUser currentUser = FirebaseAuth.getInstance().getCurrentUser();\r\n        if (currentUser != null) {\r\n            String userId = currentUser.getUid();\r\n            DocumentReference userRef = db.collection(\"users\").document(userId)\r\n                    .collection(\"jobApply\").document(jobId); // Use jobId as the document ID\r\n            // Add the job ID as a field in the document within the \"jobApply\" subcollection\r\n            userRef.set(new HashMap<String, Object>() {{\r\n                        put(\"jobId\", jobId.toString());\r\n                    }})\r\n                    .addOnSuccessListener(documentReference -> {\r\n                        Toast.makeText(this, \"Applied successfully\", Toast.LENGTH_SHORT).show();\r\n                        // Document created successfully\r\n                    })\r\n                    .addOnFailureListener(e -> {\r\n                        // Handle failure\r\n                        Toast.makeText(this, \"Failed to apply\", Toast.LENGTH_SHORT).show();\r\n                    });\r\n        }\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/jobhunt/TempActivity.java b/app/src/main/java/com/example/jobhunt/TempActivity.java
--- a/app/src/main/java/com/example/jobhunt/TempActivity.java	(revision 36fe2522262a8f365fad1c49702e40c0890afe04)
+++ b/app/src/main/java/com/example/jobhunt/TempActivity.java	(date 1709203737444)
@@ -23,6 +23,7 @@
 import com.google.firebase.firestore.DocumentSnapshot;
 import com.google.firebase.firestore.FirebaseFirestore;
 import com.google.firebase.firestore.QueryDocumentSnapshot;
+import com.google.firebase.firestore.Transaction;
 
 import java.util.HashMap;
 
@@ -31,7 +32,6 @@
     private TextView textView,description,txtworkplace,txttime,txtsalary,txtlocation,txtexpr,txteligibility;
     ImageView imgphoto,imageView;
     Button btnapply;
-
     private FirebaseFirestore db;
     private FirebaseAuth auth;
 
@@ -80,41 +80,6 @@
 
         FirebaseFirestore db = FirebaseFirestore.getInstance();
 
-//        db.collection("jobs").document(documentId).get()
-//                .addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
-//                    @Override
-//                    public void onComplete(@NonNull Task<DocumentSnapshot> task) {
-//                        if (task.isSuccessful()) {
-//                            DocumentSnapshot document = task.getResult();
-//                            if (document.exists()) {
-//                                // Document exists, extract data and display
-//                                String workplace = document.getString("workplace");
-//                                String time = document.getString("time");
-//                                String salary = document.getString("salary");
-//                                String location = document.getString("location");
-//                                String expr = document.getString("expr");
-//
-//                                txtworkplace.setText(workplace != null ? workplace : "No workplace");
-//                                txttime.setText(time != null ? time : "No time");
-//                                txtsalary.setText(salary != null ? salary : "No salary");
-//                                txtlocation.setText(location != null ? location : "No location");
-//                                txtexpr.setText(expr != null ? expr : "No expr");
-//
-//                            } else {
-//                                // Document does not exist, display default message
-//                                txtworkplace.setText("txtworkplace not found");
-//                                txttime.setText("No description txttime");
-//                                txtsalary.setText("No description txtsalary");
-//                            }
-//                        } else {
-//                            // Handle errors while fetching document
-//                            txtworkplace.setText("Error fetching txtworkplace");
-//                            txttime.setText("Error fetching txttime");
-//                            txtsalary.setText("No txtsalary available");
-//                        }
-//                    }
-//                });
-
         db.collection("jobs").document(documentId).get()
                 .addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
                     @Override
@@ -164,6 +129,27 @@
                         }
                     }
                 });
+        DocumentReference userRef = db.collection("users").document(userId);
+        // Fetch the document containing the user data
+        userRef.get().addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {
+            @Override
+            public void onSuccess(DocumentSnapshot documentSnapshot) {
+                if (documentSnapshot.exists()) {
+                    // Get the image URL from the "profileImageUrl" field in the document
+                    String resume = documentSnapshot.getString("resumeFileName");
+
+                } else {
+                    // Document does not exist
+                    // You can handle this case accordingly
+                }
+            }
+        }).addOnFailureListener(new OnFailureListener() {
+            @Override
+            public void onFailure(@NonNull Exception e) {
+                // Handle failure to fetch user data
+                Log.e("EditProfile", "Error fetching user data", e);
+            }
+        });
 
 
         //image view chang
@@ -171,7 +157,7 @@
         btnapply.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
-                checkIfAlreadyApplied(documentId);
+                checkIfAlreadyApplied(documentId,id);
             }
         });
 
@@ -198,7 +184,7 @@
             });
         }
     }
-    private void checkIfAlreadyApplied(String jobId) {
+    public void checkIfAlreadyApplied(String documentId,String jobId) {
         FirebaseFirestore db = FirebaseFirestore.getInstance();
         FirebaseUser currentUser = FirebaseAuth.getInstance().getCurrentUser();
         if (currentUser != null) {
@@ -212,7 +198,7 @@
                 } else {
                     // User has not applied for this job yet
 //                    applyForJob(jobId);
-                    bottomsheet bottomSheet = bottomsheet.newInstance(jobId);
+                    bottomsheet bottomSheet = bottomsheet.newInstance(documentId,jobId);
                     bottomSheet.show(getSupportFragmentManager(),null);
                 }
             }).addOnFailureListener(e -> {
@@ -222,54 +208,50 @@
         }
     }
 
+
     private void resumename(String userId) {
         // Get the reference to the document containing the user data
-        DocumentReference userRef = db.collection("users").document(userId);
-        // Fetch the document containing the user data
-        userRef.get().addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {
-            @Override
-            public void onSuccess(DocumentSnapshot documentSnapshot) {
-                if (documentSnapshot.exists()) {
-                    // Get the image URL from the "profileImageUrl" field in the document
-                    String resume = documentSnapshot.getString("resumeFileName");
-
 
-                } else {
-                    // Document does not exist
-                    // You can handle this case accordingly
-                }
-            }
-        }).addOnFailureListener(new OnFailureListener() {
-            @Override
-            public void onFailure(@NonNull Exception e) {
-                // Handle failure to fetch user data
-                Log.e("EditProfile", "Error fetching user data", e);
-            }
-        });
     }
 
 
-    private void applyForJob(String jobId) {
+    private void applyForJob(String companyId, String jobId) {
         FirebaseFirestore db = FirebaseFirestore.getInstance();
         FirebaseUser currentUser = FirebaseAuth.getInstance().getCurrentUser();
         if (currentUser != null) {
             String userId = currentUser.getUid();
-            DocumentReference userRef = db.collection("users").document(userId)
-                    .collection("jobApply").document(jobId); // Use jobId as the document ID
-            // Add the job ID as a field in the document within the "jobApply" subcollection
-            userRef.set(new HashMap<String, Object>() {{
-                        put("jobId", jobId.toString());
-                    }})
-                    .addOnSuccessListener(documentReference -> {
+
+            // Store the user's application under the company's job listing
+            DocumentReference companyJobRef = db.collection("jobs")
+                    .document(companyId)
+                    .collection("jobApplications")
+                    .document(jobId)
+                    .collection("candidates")
+                    .document(userId);
+
+            // Update a "process" field in the user's job application entry
+            DocumentReference userJobRef = db.collection("users")
+                    .document(userId)
+                    .collection("jobApplications")
+                    .document(jobId);
+
+            HashMap<String, Object> userData = new HashMap<>();
+            userData.put("process", "applied");
+
+            db.runTransaction((Transaction.Function<Void>) transaction -> {
+                        transaction.set(companyJobRef, userData);
+                        transaction.set(userJobRef, userData);
+                        return null;
+                    })
+                    .addOnSuccessListener(aVoid -> {
                         Toast.makeText(this, "Applied successfully", Toast.LENGTH_SHORT).show();
-                        // Document created successfully
                     })
                     .addOnFailureListener(e -> {
-                        // Handle failure
                         Toast.makeText(this, "Failed to apply", Toast.LENGTH_SHORT).show();
                     });
         }
     }
 
+
 }
 
Index: app/src/main/java/com/example/jobhunt/bottomsheet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.jobhunt;\r\n\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.google.android.material.bottomsheet.BottomSheetDialogFragment;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.firestore.DocumentReference;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\n\r\nimport java.util.HashMap;\r\n\r\n/**\r\n * A simple {@link Fragment} subclass.\r\n * Use the {@link bottomsheet#newInstance} factory method to\r\n * create an instance of this fragment.\r\n */\r\npublic class bottomsheet extends BottomSheetDialogFragment {\r\n\r\n\r\n    public bottomsheet() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n    /**\r\n     * Use this factory method to create a new instance of\r\n     * this fragment using the provided parameters.\r\n     *\r\n     * @param jobId Parameter 1.\r\n\r\n     * @return A new instance of fragment bottomsheet.\r\n     */\r\n    // TODO: Rename and change types and number of parameters\r\n    public static bottomsheet newInstance(String jobId) {\r\n        bottomsheet fragment = new bottomsheet();\r\n        Bundle args = new Bundle();\r\n        args.putString(\"jobId\",jobId); // Add the ID to the arguments bundle\r\n        fragment.setArguments(args);\r\n        return fragment;\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        View view = inflater.inflate(R.layout.fragment_bottomsheet, container, false);\r\n\r\n        // Retrieve references to views\r\n        TextView textViewName = view.findViewById(R.id.txtresume);\r\n        Button button = view.findViewById(R.id.submit);\r\n        String jobId = getArguments().getString(\"jobId\");\r\n\r\n        // Set the text name\r\n        textViewName.setText(jobId);\r\n\r\n        // Set click listener on the button\r\n        button.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                // Handle button click event here\r\n                // For example, you can dismiss the bottom sheet dialog\r\n//                applyForJob();\r\n                dismiss();\r\n            }\r\n        });\r\n\r\n        return view;\r\n    }\r\n    private void applyForJob(String jobId) {\r\n        FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n        FirebaseUser currentUser = FirebaseAuth.getInstance().getCurrentUser();\r\n        if (currentUser != null) {\r\n            String userId = currentUser.getUid();\r\n            DocumentReference userRef = db.collection(\"users\").document(userId)\r\n                    .collection(\"jobApply\").document(jobId); // Use jobId as the document ID\r\n            // Add the job ID as a field in the document within the \"jobApply\" subcollection\r\n            userRef.set(new HashMap<String, Object>() {{\r\n                        put(\"jobId\", jobId);\r\n                    }})\r\n                    .addOnSuccessListener(documentReference -> {\r\n//                        Toast.makeText(this, \"Applied successfully\", Toast.LENGTH_SHORT).show();\r\n                        // Document created successfully\r\n                    })\r\n                    .addOnFailureListener(e -> {\r\n                        // Handle failure\r\n//                        Toast.makeText(this, \"Failed to apply\", Toast.LENGTH_SHORT).show();\r\n                    });\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/jobhunt/bottomsheet.java b/app/src/main/java/com/example/jobhunt/bottomsheet.java
--- a/app/src/main/java/com/example/jobhunt/bottomsheet.java	(revision 36fe2522262a8f365fad1c49702e40c0890afe04)
+++ b/app/src/main/java/com/example/jobhunt/bottomsheet.java	(date 1709204393541)
@@ -14,6 +14,7 @@
 import com.google.firebase.auth.FirebaseUser;
 import com.google.firebase.firestore.DocumentReference;
 import com.google.firebase.firestore.FirebaseFirestore;
+import com.google.firebase.firestore.Transaction;
 
 import java.util.HashMap;
 
@@ -38,10 +39,12 @@
      * @return A new instance of fragment bottomsheet.
      */
     // TODO: Rename and change types and number of parameters
-    public static bottomsheet newInstance(String jobId) {
+    public static bottomsheet newInstance(String companyId,String jobId) {
         bottomsheet fragment = new bottomsheet();
         Bundle args = new Bundle();
-        args.putString("jobId",jobId); // Add the ID to the arguments bundle
+//        args.putString("resume",resume);
+        args.putString("jobId",jobId);// Add the ID to the arguments bundle
+        args.putString("companyId",companyId);
         fragment.setArguments(args);
         return fragment;
     }
@@ -60,6 +63,8 @@
         // Retrieve references to views
         TextView textViewName = view.findViewById(R.id.txtresume);
         Button button = view.findViewById(R.id.submit);
+//        String resume = getArguments().getString("resume");
+        String companyId = getArguments().getString("companyId");
         String jobId = getArguments().getString("jobId");
 
         // Set the text name
@@ -71,32 +76,51 @@
             public void onClick(View v) {
                 // Handle button click event here
                 // For example, you can dismiss the bottom sheet dialog
-//                applyForJob();
-                dismiss();
+                applyForJob(companyId,jobId);
+
             }
         });
 
         return view;
     }
-    private void applyForJob(String jobId) {
+    private void applyForJob(String companyId, String jobId) {
         FirebaseFirestore db = FirebaseFirestore.getInstance();
         FirebaseUser currentUser = FirebaseAuth.getInstance().getCurrentUser();
         if (currentUser != null) {
             String userId = currentUser.getUid();
-            DocumentReference userRef = db.collection("users").document(userId)
-                    .collection("jobApply").document(jobId); // Use jobId as the document ID
-            // Add the job ID as a field in the document within the "jobApply" subcollection
-            userRef.set(new HashMap<String, Object>() {{
-                        put("jobId", jobId);
-                    }})
-                    .addOnSuccessListener(documentReference -> {
+
+            // Store the user's application under the company's job listing
+            DocumentReference companyJobRef = db.collection("jobs")
+                    .document(companyId)
+                    .collection("job")
+                    .document(jobId)
+                    .collection("candidates")
+                    .document(userId);
+
+            // Update a "process" field in the user's job application entry
+            DocumentReference userJobRef = db.collection("users")
+                    .document(userId)
+                    .collection("jobApply")
+                    .document(companyId)
+                    .collection("applyjob")
+                    .document(jobId);
+
+            HashMap<String, Object> userData = new HashMap<>();
+            userData.put("process", "applied");
+
+            db.runTransaction((Transaction.Function<Void>) transaction -> {
+                        transaction.set(companyJobRef, userData);
+                        transaction.set(userJobRef, userData);
+                        return null;
+                    })
+                    .addOnSuccessListener(aVoid -> {
 //                        Toast.makeText(this, "Applied successfully", Toast.LENGTH_SHORT).show();
-                        // Document created successfully
+                        dismiss();
                     })
                     .addOnFailureListener(e -> {
-                        // Handle failure
 //                        Toast.makeText(this, "Failed to apply", Toast.LENGTH_SHORT).show();
                     });
         }
     }
+
 }
\ No newline at end of file
